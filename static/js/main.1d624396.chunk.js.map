{"version":3,"sources":["App/Topbar.tsx","App/PlaygroundContainer/Editor.tsx","App/PlaygroundContainer/TestList/TokenList.tsx","defaultValues.ts","App/PlaygroundContainer/TestList.tsx","App/PlaygroundContainer.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","title","flexGrow","Topbar","classes","AppBar","position","Toolbar","Typography","variant","className","Button","aria-label","color","endIcon","href","Editor","code","updateCode","style","fontFamily","value","onValueChange","highlight","languages","js","tabSize","isError","tokens","tokensToHTML","Array","map","token","JSON","stringify","join","tokenWrapper","overflowX","errorMessage","TokenList","dangerouslySetInnerHTML","__html","defaultTests","root","width","heading","fontSize","typography","pxToRem","display","secondaryHeading","palette","text","secondary","textOverflow","whiteSpace","overflow","textWrapper","left","right","top","bottom","justifyContent","alignItems","TestList","mooCode","lexer","useMemo","Function","moo","ex","createLexer","calculateTokens","useCallback","input","undefined","reset","result","current","next","push","message","useState","lastLexer","setLastLexer","str","Object","tests","setTests","newTestInput","setNewTestInput","addNewTest","useEffect","forEach","TextField","label","onChange","event","target","onKeyPress","ev","key","preventDefault","IconButton","onClick","test","idx","changedTest","testShortDescription","t","type","ExpansionPanel","ExpansionPanelSummary","expandIcon","error","newTests","ExpansionPanelDetails","ExpansionPanelActions","size","filter","deleteTest","PlaygroundContainer","setCode","Grid","container","item","xs","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d624396.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport function Topbar() {\n    const classes = useStyles()\n\n    return (\n        <AppBar position=\"relative\">\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Moo Playground\n                </Typography>\n                <Button\n                    aria-label=\"github link of moo\"\n                    color=\"inherit\"\n                    endIcon={<GitHubIcon/>}\n                    href=\"https://github.com/no-context/moo\"\n                >Moo Github</Button>\n                <Button\n                    aria-label=\"github link of this playground\"\n                    color=\"inherit\"\n                    endIcon={<GitHubIcon/>}\n                    href=\"https://github.com/AblingerOscar/moo-playground\"\n                >Moo playground Github</Button>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import React from 'react'\nimport SimpleEditor from 'react-simple-code-editor'\nimport { highlight, languages } from 'prismjs/components/prism-core'\nimport 'prismjs/components/prism-clike'\nimport 'prismjs/components/prism-javascript'\nimport 'prismjs/themes/prism.css'\n\nexport function Editor({ code: [code, updateCode]}: {code: [string, (newCode: string) => void]} ) {\n    return (\n        <SimpleEditor\n            style={{fontFamily:'Roboto mono, monospace'}}\n            value={code}\n            onValueChange={updateCode}\n            highlight={code => highlight(code, languages.js)}\n            tabSize={4}\n        />\n    )\n}","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Token } from 'moo'\n\nfunction isError(tokens: string|Token[]): boolean {\n    return typeof tokens === 'string'\n}\n\nfunction tokensToHTML(tokens: string|Token[]): string {\n    if (tokens instanceof Array) {\n        return tokens.map(token => JSON.stringify(token)).join('\\n')\n    } else {\n        return tokens\n    }\n}\n\nconst useStyles = makeStyles(theme => ({\n    tokenWrapper: {\n        overflowX: 'auto'\n    },\n    errorMessage: {\n        color: 'red',\n    },\n}))\n\nexport function TokenList({ tokens }: { tokens: string|Token[]}) {\n    const classes = useStyles()\n\n    return <div\n        aria-label=\"list of resulting tokens or the error message\"\n        className={`${classes.tokenWrapper} ${isError(tokens) ? classes.errorMessage : ''}`}\n    >\n        <pre>\n            <code dangerouslySetInnerHTML={{__html: tokensToHTML(tokens)}}></code>\n        </pre>\n    </div>\n\n    /*\n    function interpretAsAListOfTokens(tokens: Token[]) {\n        return tokens.map((token, idx) => <ListItem dense key={idx}>\n            <ListItemText primary={<pre><code dangerouslySetInnerHTML={{__html: JSON.stringify(token)}}></code></pre>} />\n            </ListItem>)\n    }\n\n    function interpretAsAnError(errorMsg: string) {\n        return <ListItem>\n            <pre>\n                <code dangerouslySetInnerHTML={{__html: errorMsg}} style={{color: 'red'}}></code>\n            </pre>\n        </ListItem>\n    }\n\n    const inner = tokens instanceof Array\n        ? interpretAsAListOfTokens(tokens)\n        : interpretAsAnError(tokens)\n\n    return <List component=\"nav\" aria-label=\"list of resulting tokens (or the error message)\">\n        {inner}\n      </List>\n      */\n}","export const defaultCode: string =\n`return moo.compile({\n    WS:      /[ \\\\t]+/,\n    comment: /\\\\/\\\\/.*?$/,\n    number:  /0|[1-9][0-9]*/,\n    string:  /\"(?:\\\\\\\\[\"\\\\\\\\]|[^\\\\n\"\\\\\\\\])*\"/,\n    lparen:  '(',\n    rparen:  ')',\n    keyword: ['while', 'if', 'else', 'moo', 'cows'],\n    NL:      { match: /\\\\n/, lineBreaks: true },\n})\n`\nexport const defaultTests: string[] = [\n    'while (cows moo)',\n    'while (cows caw)'\n]","import React, { useState, useMemo, useEffect, useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport IconButton from '@material-ui/core/IconButton'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add'\nimport moo, { Lexer, Token } from 'moo'\nimport './TestList.css'\nimport { TokenList } from './TestList/TokenList';\nimport { defaultTests } from '../../defaultValues'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        display: 'inline-block',\n        width: '30%',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'inline-block',\n        width: '60%',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n    },\n    textWrapper: {\n        position: 'absolute',\n        left: 0,\n        right: theme.typography.pxToRem(30),\n        top: 0,\n        bottom: 0,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n}));\n\ninterface Test {\n    input: string\n    tokens: string|Token[]\n}\n\nfunction createLexer(code: string): Lexer|undefined {\n    try {\n        // eslint-disable-next-line no-new-func\n        return Function('moo', `${code}`)(moo)\n    } catch (ex) {\n        // while writing the code is expected to be invalid (incomplete) often\n        // therefore -> fail silently\n        return undefined\n    }\n}\n\nexport function TestList({mooCode}: {mooCode: string}) {\n    const lexer = useMemo(() => createLexer(mooCode), [mooCode])\n\n    const calculateTokens = useCallback((input: string): string|Token[] => {\n            // eslint-disable-next-line eqeqeq\n            if (lexer == undefined) {\n                return 'code is not valid'\n            }\n\n            try {\n                lexer.reset(input)\n                const result: Token[] = []\n\n                let current = lexer.next()\n                // eslint-disable-next-line eqeqeq\n                while(current != undefined) {\n                    result.push(current)\n                    current = lexer.next()\n                }\n\n                return result\n            } catch(ex) {\n                return ex.message\n            }\n        },\n        [lexer])\n\n    const [lastLexer, setLastLexer] = useState(lexer)\n    const [tests, setTests] = useState<Test[]>(defaultTests.map(str => Object({input: str, tokens: calculateTokens(str)})))\n    const [newTestInput, setNewTestInput] = useState<string>('')\n    const classes = useStyles()\n\n    useEffect(() => {\n        if (lastLexer !== lexer) {\n            setLastLexer(lexer)\n\n            tests.forEach(token => token.tokens = calculateTokens(token.input))\n            setTests(tests)\n        }\n    }, [lastLexer, lexer, calculateTokens, tests])\n\n    function onTextFieldChange(changedTest: Test) {\n        return (event: any /*React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>*/) => {\n            const newTests = tests.map(t =>\n                (t !== changedTest)\n                    ? t\n                    : { input: event.target.value, tokens: calculateTokens(event.target.value) })\n\n            setTests(newTests)\n        }\n    }\n\n    function addNewTest() {\n        tests.push({input: newTestInput, tokens: calculateTokens(newTestInput)})\n        setTests(tests)\n        setNewTestInput('')\n    }\n\n    function deleteTest(test: Test) {\n        setTests(tests.filter(t => t !== test))\n    }\n\n    return (\n        <div>\n            <div className=\"add-test-wrapper\">\n                <TextField\n                    label=\"Add new Test\"\n                    className=\"add-input-field\"\n                    value={newTestInput}\n                    onChange={event => setNewTestInput(event.target.value)}\n                    onKeyPress={(ev) => {\n                        if (ev.key === 'Enter') {\n                            addNewTest()\n                            ev.preventDefault();\n                        }\n                    }}\n                ></TextField>\n                <IconButton\n                    className=\"add-button\"\n                    onClick={addNewTest}\n                ><AddIcon/></IconButton>\n            </div>\n\n            {tests.map((test, idx) => {\n                const testShortDescription = test.tokens instanceof Array ? test.tokens.map(t => t.type).join(',') : test.tokens\n                return (\n                <ExpansionPanel key={`panel-${idx}`}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                    >\n                        <div className={classes.textWrapper}>\n                            <TextField\n                                className={classes.heading}\n                                value={test.input}\n                                error={!(test.tokens instanceof Array)}\n                                onChange={onTextFieldChange(test)}\n                            ></TextField>\n                            <Typography className={classes.secondaryHeading} title={testShortDescription}>\n                                {testShortDescription}\n                            </Typography>\n                        </div>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <TokenList tokens={test.tokens} />\n                    </ExpansionPanelDetails>\n                    <ExpansionPanelActions>\n                        <Button size=\"small\" color=\"secondary\" onClick={() => deleteTest(test)}>\n                            Delete Test\n                        </Button>\n                    </ExpansionPanelActions>\n                </ExpansionPanel>\n            )})}\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { Editor } from './PlaygroundContainer/Editor'\nimport { TestList } from './PlaygroundContainer/TestList'\nimport { defaultCode } from '../defaultValues'\n\nexport function PlaygroundContainer() {\n    const [code, setCode] = useState(defaultCode)\n\n    return (\n        <Grid container className=\"max-flexer playground-container\">\n            <Grid item xs={6}>\n                <Editor\n                    code={[code, setCode]}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                <TestList\n                    mooCode={code}\n                />\n            </Grid>\n        </Grid>\n    )\n}","import React from 'react'\nimport { Topbar } from './App/Topbar'\nimport { PlaygroundContainer } from './App/PlaygroundContainer';\nimport './App.css';\n\nexport function App() {\n    return (\n        <div className=\"full-height app-wrapper\">\n            <Topbar/>\n            <PlaygroundContainer />\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}